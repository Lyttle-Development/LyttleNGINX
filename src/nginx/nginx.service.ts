import { Injectable } from '@nestjs/common';
import { ProxyEntry, ProxyType } from '@prisma/client';

@Injectable()
export class NginxService {
  public generateNginxConfig(entries: ProxyEntry[]): string {
    let config = `# Generated by NestJS App - DO NOT EDIT`;

    for (const entry of entries) {
      const domains = entry.domains
        .split(';')
        .map((d) => d.trim())
        .filter(Boolean);
      if (domains.length === 0) continue;

      const server_block = `
server {
  listen 80;
  listen [::]:80;
  listen 443 ssl;
  listen [::]:443 ssl;
  
  server_name ${domains.join(' ')};

  # SSL Configuration
  ssl_certificate /etc/nginx/ssl/server.crt;
  ssl_certificate_key /etc/nginx/ssl/server.key;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers HIGH:!aNULL:!MD5;

  ${
    entry.type === ProxyType.REDIRECT
      ? `return 301 ${entry.proxy_pass_host};`
      : `
      location / {
        proxy_pass ${entry.proxy_pass_host};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400;
        proxy_ssl_verify off; 
      }
      `
  }
  ${entry.nginx_custom_code || ''}
}
`;
      config += server_block;
    }

    return config;
  }
}
